# Generated by Django 3.2.9 on 2021-12-04 00:42

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import orjson
from django.conf import settings
from django.db import migrations, models

import web.api.models.notification_settings
import web.utils.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(blank=True, null=True, verbose_name="last login"),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={"unique": "A user with that username already exists."},
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(blank=True, max_length=150, verbose_name="first name"),
                ),
                (
                    "last_name",
                    models.CharField(blank=True, max_length=150, verbose_name="last name"),
                ),
                (
                    "email",
                    models.EmailField(blank=True, max_length=254, verbose_name="email address"),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Device",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "name",
                    models.TextField(
                        help_text="A user-friendly string that identifies the device."
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, help_text="A description of the device."),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        help_text="The user which owns the device.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Test",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("name", models.TextField(help_text="A user-friendly string that names the test.")),
                (
                    "description",
                    models.TextField(blank=True, help_text="A description of the test."),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="The date and time of the creation of this test.",
                    ),
                ),
                (
                    "frequency",
                    models.DurationField(help_text="The frequency of execution for the test."),
                ),
                (
                    "priority",
                    models.PositiveSmallIntegerField(
                        help_text="The test's execution priority. Used to break ties when multiple tests of a device are scheduled at the same time. A smaller value indicates a higher priority.",
                        unique=True,
                    ),
                ),
                (
                    "device",
                    models.ForeignKey(
                        help_text="The device on which the test will execute.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.device",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TestHistory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "started_at",
                    models.DateTimeField(
                        help_text="The date and time when test execution started.", null=True
                    ),
                ),
                (
                    "ended_at",
                    models.DateTimeField(
                        help_text="The date and time when test execution ended.", null=True
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("SC", "Scheduled"),
                            ("CA", "Cancelled"),
                            ("RU", "Running"),
                            ("SU", "Succeeded"),
                            ("FA", "Failed"),
                        ],
                        default="SC",
                        help_text="The current status of this test instance's execution.",
                        max_length=2,
                    ),
                ),
                (
                    "test",
                    models.ForeignKey(
                        help_text="The test to which this history pertains.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.test",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Parameter",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "name",
                    models.TextField(help_text="A user-friendly string that names the parameter."),
                ),
                (
                    "description",
                    models.TextField(blank=True, help_text="A description of the parameter."),
                ),
                (
                    "unit",
                    models.TextField(
                        help_text="The name of the unit of measurement for the parameter."
                    ),
                ),
                (
                    "is_manual",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the parameter has to be set manually by a user after a test run.",
                    ),
                ),
                (
                    "test",
                    models.ForeignKey(
                        help_text="The test which sets this parameter.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.test",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="NotificationSettings",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "condition",
                    web.utils.fields.OrjsonField(
                        decoder=orjson.loads,
                        encoder=orjson.dumps,
                        help_text="A JsonLogic-encoded expression to evaluate to determine whether to notify.",
                        validators=[web.api.models.notification_settings.validate_json_logic],
                    ),
                ),
                (
                    "message",
                    models.TextField(
                        blank=True, help_text="The message to display in the notification."
                    ),
                ),
                (
                    "destination",
                    web.utils.fields.ChoiceArrayField(
                        base_field=models.CharField(
                            choices=[("EM", "Email"), ("WE", "Web")],
                            default=("WE",),
                            help_text="Where to send the notification.",
                            max_length=2,
                        ),
                        size=None,
                    ),
                ),
                (
                    "test",
                    models.ForeignKey(
                        help_text="The test for which to notify.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.test",
                    ),
                ),
            ],
        ),
        migrations.AddConstraint(
            model_name="testhistory",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("ended_at__isnull", True),
                    ("started_at__isnull", True),
                    ("status__exact", "SC"),
                ),
                name="scheduled_timestamps_null",
            ),
        ),
        migrations.AddConstraint(
            model_name="testhistory",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("ended_at__isnull", True),
                    ("started_at__isnull", False),
                    ("status__exact", "RU"),
                ),
                name="running_started_at_not_null_ended_at_null",
            ),
        ),
        migrations.AddConstraint(
            model_name="testhistory",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("ended_at__isnull", False),
                    ("started_at__isnull", False),
                    ("status__exact", "SU"),
                ),
                name="succeeded_timestamps_not_null",
            ),
        ),
        migrations.AddConstraint(
            model_name="testhistory",
            constraint=models.CheckConstraint(
                check=models.Q(("ended_at__isnull", False), ("status__exact", "CA")),
                name="cancelled_ended_at_not_null",
            ),
        ),
    ]
